Exercise-2/main.cpp:14:9: warning:inconclusive: Member variable 'ExampleClass::m_value' is not initialized in the constructor. [uninitMemberVar]
        ExampleClass(){}
        ^
Exercise-2/headers/MyList.hpp:23:5: warning: Member variable 'Node < int >::value' is not initialized in the constructor. [uninitMemberVar]
    Node(){}
    ^
Exercise-2/headers/MyList.hpp:50:22: style:inconclusive: Technically the member function 'MyList < ExampleClass >::getSize' can be const. [functionConst]
        const size_t getSize();
                     ^
Exercise-2/src/MyList.cpp:10:25: note: Technically the member function 'MyList < ExampleClass >::getSize' can be const.
const size_t MyList<T>::getSize()
                        ^
Exercise-2/headers/MyList.hpp:50:22: note: Technically the member function 'MyList < ExampleClass >::getSize' can be const.
        const size_t getSize();
                     ^
Exercise-2/headers/MyList.hpp:158:20: style:inconclusive: Technically the member function 'MyList < ExampleClass >::isEmpty' can be const. [functionConst]
        const bool isEmpty();
                   ^
Exercise-2/src/MyList.cpp:205:23: note: Technically the member function 'MyList < ExampleClass >::isEmpty' can be const.
const bool MyList<T>::isEmpty()
                      ^
Exercise-2/headers/MyList.hpp:158:20: note: Technically the member function 'MyList < ExampleClass >::isEmpty' can be const.
        const bool isEmpty();
                   ^
Exercise-2/headers/MyList.hpp:50:22: style:inconclusive: Technically the member function 'MyList < int >::getSize' can be const. [functionConst]
        const size_t getSize();
                     ^
Exercise-2/src/MyList.cpp:10:25: note: Technically the member function 'MyList < int >::getSize' can be const.
const size_t MyList<T>::getSize()
                        ^
Exercise-2/headers/MyList.hpp:50:22: note: Technically the member function 'MyList < int >::getSize' can be const.
        const size_t getSize();
                     ^
Exercise-2/headers/MyList.hpp:158:20: style:inconclusive: Technically the member function 'MyList < int >::isEmpty' can be const. [functionConst]
        const bool isEmpty();
                   ^
Exercise-2/src/MyList.cpp:205:23: note: Technically the member function 'MyList < int >::isEmpty' can be const.
const bool MyList<T>::isEmpty()
                      ^
Exercise-2/headers/MyList.hpp:158:20: note: Technically the member function 'MyList < int >::isEmpty' can be const.
        const bool isEmpty();
                   ^
Exercise-2/tests/myList_unittest.cpp:186:9: warning:inconclusive: Member variable 'MockClass::m_value' is not initialized in the constructor. [uninitMemberVar]
        MockClass(){}
        ^
Exercise-2/headers/MyList.hpp:50:22: style:inconclusive: Technically the member function 'MyList < std :: string >::getSize' can be const. [functionConst]
        const size_t getSize();
                     ^
Exercise-2/src/MyList.cpp:10:25: note: Technically the member function 'MyList < std :: string >::getSize' can be const.
const size_t MyList<T>::getSize()
                        ^
Exercise-2/headers/MyList.hpp:50:22: note: Technically the member function 'MyList < std :: string >::getSize' can be const.
        const size_t getSize();
                     ^
Exercise-2/headers/MyList.hpp:158:20: style:inconclusive: Technically the member function 'MyList < std :: string >::isEmpty' can be const. [functionConst]
        const bool isEmpty();
                   ^
Exercise-2/src/MyList.cpp:205:23: note: Technically the member function 'MyList < std :: string >::isEmpty' can be const.
const bool MyList<T>::isEmpty()
                      ^
Exercise-2/headers/MyList.hpp:158:20: note: Technically the member function 'MyList < std :: string >::isEmpty' can be const.
        const bool isEmpty();
                   ^
Exercise-2/headers/MyList.hpp:50:22: style:inconclusive: Technically the member function 'MyList < MockClass >::getSize' can be const. [functionConst]
        const size_t getSize();
                     ^
Exercise-2/src/MyList.cpp:10:25: note: Technically the member function 'MyList < MockClass >::getSize' can be const.
const size_t MyList<T>::getSize()
                        ^
Exercise-2/headers/MyList.hpp:50:22: note: Technically the member function 'MyList < MockClass >::getSize' can be const.
        const size_t getSize();
                     ^
Exercise-2/headers/MyList.hpp:158:20: style:inconclusive: Technically the member function 'MyList < MockClass >::isEmpty' can be const. [functionConst]
        const bool isEmpty();
                   ^
Exercise-2/src/MyList.cpp:205:23: note: Technically the member function 'MyList < MockClass >::isEmpty' can be const.
const bool MyList<T>::isEmpty()
                      ^
Exercise-2/headers/MyList.hpp:158:20: note: Technically the member function 'MyList < MockClass >::isEmpty' can be const.
        const bool isEmpty();
                   ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

